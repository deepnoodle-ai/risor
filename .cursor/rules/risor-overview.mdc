---
description: 
globs: 
alwaysApply: true
---
## Risor Overview

Risor is a fast, embeddable scripting language for Go developers and DevOps, designed to integrate with the Go standard library. Scripts are compiled to bytecode and run on a lightweight virtual machine.

### Project Structure

- **Main Components**:
  - `/cmd/risor`: CLI and REPL implementation
  - `/modules/`: Modules wrapping Go packages and additional functionality
  - `/vm/`: Virtual machine implementation
  - `/parser/`, `/lexer/`, `/compiler/`: Language processing components
  - `/object/`: Core type system

### Module System

The `/modules/` directory contains Risor modules that either:

1. Wrap Go standard library packages (e.g. `base64`, `strings`, `json`)
2. Provide additional functionality (e.g. `aws`, `k8s`, `vault`)

#### Creating New Modules

Modules follow a consistent pattern:

1. Create a directory in `/modules/` with the module name
2. Implement core functions that accept and return Risor objects
3. Create a `Module()` function that registers the module and its functions

Example from `modules/base64`:

```go
func Module() *object.Module {
    return object.NewBuiltinsModule("base64", map[string]object.Object{
        "decode":     object.NewBuiltin("decode", Decode),
        "encode":     object.NewBuiltin("encode", Encode),
        "url_decode": object.NewBuiltin("url_decode", URLDecode),
        "url_encode": object.NewBuiltin("url_encode", URLEncode),
    })
}
```

All module functions should follow this signature pattern:
```go
func FunctionName(ctx context.Context, args ...object.Object) object.Object {
    // Validate arguments, convert types, call into Go libraries, return results
}
```

For external/optional modules:

1. Include `go.mod` and `go.sum` files
2. Register the module in the application by importing and providing it with `risor.WithGlobals()`

Each module should also include documentation (`.md` file) with function signatures and examples.

### Key Development Practices

- Follow Go standard library conventions and idioms
- Validate function arguments with `arg.Require()` or similar
- Convert between Risor objects and Go types using `object.AsXXX()` functions
- Return errors using `object.NewError()` or similar
- Ensure thorough test coverage with `_test.go` files

### Syntax Examples

Risor has a Go-inspired syntax with some Python-like features for simplicity:

```risor
// Hello World
print("Hello world!")

// Functions and recursion
func fibonacci(n) {
    if n <= 1 {
        return n
    }
    return fibonacci(n-1) + fibonacci(n-2)
}

// Loops
for i := range 3 {
    print(i)
}

// Closures
func incrementer(value=0) {
    func inner() {
        result := value
        value++
        return result
    }
    return inner
}

// HTTP Server
http.handle("/", func(w, r) {
    return "OK"
})
http.listen_and_serve(":8080")

// Concurrency with channels
func work(count) {
    cnt := count
    mychan := chan(5)
    go func() {
        for i := 0; i < cnt; i++ {
            mychan <- rand.float()
        }
        close(mychan)
    }()
    return mychan
}
```
