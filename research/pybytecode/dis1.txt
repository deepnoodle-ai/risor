>>> a = 42
>>> def g():
...     b = a + 1
...     c.foo = 'bar'
...
>>> g.__code__.co_names
('a', 'c', 'foo')
>>> g.__code__.co_varnames
('b',)

>>> dis(g)
  1           0 RESUME                   0

  2           2 LOAD_GLOBAL              0 (a)
             14 LOAD_CONST               1 (1)
             16 BINARY_OP                0 (+)
             20 STORE_FAST               0 (b)

  3          22 LOAD_CONST               2 ('bar')
             24 LOAD_GLOBAL              2 (c)
             36 STORE_ATTR               2 (foo)
             46 LOAD_CONST               0 (None)
             48 RETURN_VALUE

------------------------------------------------------

>>> def foo(x=1):
...     return bar[x].y
...
>>> foo.__code__.co_names
('bar', 'y')
>>> foo.__code__.co_varnames
('x',)
>>> dis(foo)
  1           0 RESUME                   0

  2           2 LOAD_GLOBAL              0 (bar)
             14 LOAD_FAST                0 (x)
             16 BINARY_SUBSCR
             26 LOAD_ATTR                1 (y)
             36 RETURN_VALUE

------------------------------------------------------

>>> def foo(x):
...     return x in bar
...
>>> foo.__code__.co_names
('bar',)
>>> foo.__code__.co_varnames
('x',)
>>> dis(foo)
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (x)
              4 LOAD_GLOBAL              0 (bar)
             16 CONTAINS_OP              0
             18 RETURN_VALUE

------------------------------------------------------

>>> def ex1(x):
...     return x.foo
...
>>> dis(ex1)
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (x)
              4 LOAD_ATTR                0 (foo)
             14 RETURN_VALUE

------------------------------------------------------

>>> def fact(n):
...     if n == 0: return 1
...     return n * fact(n-1)
...
>>> dis(fact)
  1           0 RESUME                   0

  2           2 LOAD_FAST                0 (n)
              4 LOAD_CONST               1 (0)
              6 COMPARE_OP               2 (==)
             12 POP_JUMP_FORWARD_IF_FALSE     2 (to 18)
             14 LOAD_CONST               2 (1)
             16 RETURN_VALUE

  3     >>   18 LOAD_FAST                0 (n)
             20 LOAD_GLOBAL              1 (NULL + fact)
             32 LOAD_FAST                0 (n)
             34 LOAD_CONST               2 (1)
             36 BINARY_OP               10 (-)
             40 PRECALL                  1
             44 CALL                     1
             54 BINARY_OP                5 (*)
             58 RETURN_VALUE

------------------------------------------------------

def testit():
    { 1: 2 }
    { 1: 2 }
    { 1: 2 }
    return 7

 17           0 RESUME                   0

 18           2 LOAD_CONST               1 (1)
              4 LOAD_CONST               2 (2)
              6 BUILD_MAP                1
              8 POP_TOP

 19          10 LOAD_CONST               1 (1)
             12 LOAD_CONST               2 (2)
             14 BUILD_MAP                1
             16 POP_TOP

 20          18 LOAD_CONST               1 (1)
             20 LOAD_CONST               2 (2)
             22 BUILD_MAP                1
             24 POP_TOP

 21          26 LOAD_CONST               3 (7)
             28 RETURN_VALUE
