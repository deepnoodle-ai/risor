// Code generated by risor-modgen. DO NOT EDIT.

package strings

import (
	"context"
	"github.com/risor-io/risor/object"
	"math"
)

// gen_Contains is a wrapper function around [Contains]
func gen_Contains(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.contains", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	substrParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := Contains(sParam, substrParam)
	return object.NewBool(result)
}

// gen_HasPrefix is a wrapper function around [HasPrefix]
func gen_HasPrefix(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.has_prefix", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	prefixParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := HasPrefix(sParam, prefixParam)
	return object.NewBool(result)
}

// gen_HasSuffix is a wrapper function around [HasSuffix]
func gen_HasSuffix(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.has_prefix", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	suffixParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := HasSuffix(sParam, suffixParam)
	return object.NewBool(result)
}

// gen_Count is a wrapper function around [Count]
func gen_Count(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.count", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	substrParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := Count(sParam, substrParam)
	return object.NewInt(int64(result))
}

// gen_Compare is a wrapper function around [Compare]
func gen_Compare(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.compare", 2, len(args))
	}
	aParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	bParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := Compare(aParam, bParam)
	return object.NewInt(int64(result))
}

// gen_Repeat is a wrapper function around [Repeat]
func gen_Repeat(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.repeat", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	countParamRaw, err := object.AsInt(args[1])
	if err != nil {
		return err
	}
	if countParamRaw > math.MaxInt {
		return object.Errorf("type error: strings.repeat argument 'count' (index 1) cannot be > %v", math.MaxInt)
	}
	if countParamRaw < math.MinInt {
		return object.Errorf("type error: strings.repeat argument 'count' (index 1) cannot be < %v", math.MinInt)
	}
	countParam := int(countParamRaw)
	result := Repeat(sParam, countParam)
	return object.NewString(result)
}

// gen_Index is a wrapper function around [Index]
func gen_Index(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.index", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	substrParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := Index(sParam, substrParam)
	return object.NewInt(int64(result))
}

// gen_LastIndex is a wrapper function around [LastIndex]
func gen_LastIndex(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.last_index", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	substrParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := LastIndex(sParam, substrParam)
	return object.NewInt(int64(result))
}

// gen_ReplaceAll is a wrapper function around [ReplaceAll]
func gen_ReplaceAll(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 3 {
		return object.NewArgsError("strings.replace_all", 3, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	oldParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	newParam, err := object.AsString(args[2])
	if err != nil {
		return err
	}
	result := ReplaceAll(sParam, oldParam, newParam)
	return object.NewString(result)
}

// gen_ToLower is a wrapper function around [ToLower]
func gen_ToLower(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 1 {
		return object.NewArgsError("strings.to_lower", 1, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	result := ToLower(sParam)
	return object.NewString(result)
}

// gen_ToUpper is a wrapper function around [ToUpper]
func gen_ToUpper(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 1 {
		return object.NewArgsError("strings.to_upper", 1, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	result := ToUpper(sParam)
	return object.NewString(result)
}

// gen_Trim is a wrapper function around [Trim]
func gen_Trim(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.trim", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	cutsetParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := Trim(sParam, cutsetParam)
	return object.NewString(result)
}

// gen_TrimPrefix is a wrapper function around [TrimPrefix]
func gen_TrimPrefix(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.trim_prefix", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	prefixParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := TrimPrefix(sParam, prefixParam)
	return object.NewString(result)
}

// gen_TrimSuffix is a wrapper function around [TrimSuffix]
func gen_TrimSuffix(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 2 {
		return object.NewArgsError("strings.trim_suffix", 2, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	prefixParam, err := object.AsString(args[1])
	if err != nil {
		return err
	}
	result := TrimSuffix(sParam, prefixParam)
	return object.NewString(result)
}

// gen_TrimSpace is a wrapper function around [TrimSpace]
func gen_TrimSpace(ctx context.Context, args ...object.Object) object.Object {
	if len(args) != 1 {
		return object.NewArgsError("strings.trim_space", 1, len(args))
	}
	sParam, err := object.AsString(args[0])
	if err != nil {
		return err
	}
	result := TrimSpace(sParam)
	return object.NewString(result)
}

// addGeneratedBuiltins adds the generated builtin wrappers to the given map.
//
// Useful if you want to write your own "Module()" function.
func addGeneratedBuiltins(builtins map[string]object.Object) map[string]object.Object {
	builtins["contains"] = object.NewBuiltin("strings.contains", gen_Contains)
	builtins["has_prefix"] = object.NewBuiltin("strings.has_prefix", gen_HasPrefix)
	builtins["has_prefix"] = object.NewBuiltin("strings.has_prefix", gen_HasSuffix)
	builtins["count"] = object.NewBuiltin("strings.count", gen_Count)
	builtins["compare"] = object.NewBuiltin("strings.compare", gen_Compare)
	builtins["repeat"] = object.NewBuiltin("strings.repeat", gen_Repeat)
	builtins["index"] = object.NewBuiltin("strings.index", gen_Index)
	builtins["last_index"] = object.NewBuiltin("strings.last_index", gen_LastIndex)
	builtins["replace_all"] = object.NewBuiltin("strings.replace_all", gen_ReplaceAll)
	builtins["to_lower"] = object.NewBuiltin("strings.to_lower", gen_ToLower)
	builtins["to_upper"] = object.NewBuiltin("strings.to_upper", gen_ToUpper)
	builtins["trim"] = object.NewBuiltin("strings.trim", gen_Trim)
	builtins["trim_prefix"] = object.NewBuiltin("strings.trim_prefix", gen_TrimPrefix)
	builtins["trim_suffix"] = object.NewBuiltin("strings.trim_suffix", gen_TrimSuffix)
	builtins["trim_space"] = object.NewBuiltin("strings.trim_space", gen_TrimSpace)
	return builtins
}


